package com.sad.code;

import com.sad.code.solutions.Euler12;
import com.sad.code.util.LogTimerAspect;
import io.qameta.allure.Description;
import io.qameta.allure.Link;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * @see Euler12
 */
@EnableAutoConfiguration
@SpringBootTest(classes = {EmptyService.class, LogTimerAspect.class, Euler12.class})
public class Euler12Test {

    @Autowired
    Euler12 euler12;

    @ParameterizedTest
    @CsvSource({
            "500, 76576500",
            "1000, 842161320",
            "2000, 49172323200",
    })
    @Link("https://projecteuler.net/problem=12")
    @Description(
            "The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n" +
                    "1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n" +
                    "Let us list the factors of the first seven triangle numbers:\n" +
                    " 1: 1\n" +
                    " 3: 1,3\n" +
                    " 6: 1,2,3,6\n" +
                    "10: 1,2,5,10\n" +
                    "15: 1,3,5,15\n" +
                    "21: 1,3,7,21\n" +
                    "28: 1,2,4,7,14,28\n" +
                    "We can see that 28 is the first triangle number to have over five divisors.\n" +
                    "What is the value of the first triangle number to have over five hundred divisors?")
    public void test(final int divisors, final long expectingResult) {
        assertEquals(expectingResult, euler12.bruteforceSolution(divisors));
    }
}